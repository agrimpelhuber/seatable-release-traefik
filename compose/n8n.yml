---
services:
  n8n-postgres:
    image: ${N8N_POSTGRES_IMAGE:-postgres:11}
    restart: unless-stopped
    container_name: n8n-postgres
    logging:
      options:
        max-size: ${MACHINE_MAXLOG}
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-root}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?Variable is not set or empty}
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
      - POSTGRES_NON_ROOT_USER=${POSTGRES_NON_ROOT_USER:-non_root_user}
      - POSTGRES_NON_ROOT_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD:?Variable is not set or empty}
    volumes:
      - "${N8N_DB_DIR:-/opt/n8n-postgres}:/var/lib/postgresql/data"
      - "${N8N_DEF_DIR:-.}/n8n-init-data.sh:/docker-entrypoint-initdb.d/init-data.sh"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h localhost -U ${POSTGRES_USER:-root} -d ${POSTGRES_DB:-n8n}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - backend-n8n-net

  n8n:
    image: ${N8N_IMAGE:-docker.n8n.io/n8nio/n8n}
    restart: unless-stopped
    container_name: n8n
    user: root
    environment:
      - N8N_HOST=${N8N_HOST:-n8n}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - NODE_ENV=production
      - WEBHOOK_URL=${SEATABLE_SERVER_PROTOCOL:-https}://${N8N_SERVER_HOSTNAME}:${N8N_PORT:-6231}/
      - GENERIC_TIMEZONE=${TIME_ZONE}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:?Variable is not set or empty, might be already set in n8n config file}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n-postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER:-non_root_user}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - EXECUTIONS_TIMEOUT=60
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=72
      - EXECUTIONS_DATA_PRUNE_MAX_COUNT=500
      - DB_SQLITE_VACUUM_ON_STARTUP=true
      - N8N_LOG_FILE_MAXSIZE=500
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_PROGRESS=false
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=none
      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false
    volumes:
      - "${N8N_DATA_DIR:-/opt/n8n}:/root/.n8n"
      - "${N8N_UPLOAD_DIR:-/opt/n8n/upload}:/root/n8n-upload:ro"
      - "/etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro"
    labels:
      autoheal: true
      traefik.enable: true
      traefik.docker.network: "${TRAEFIK_FRONTEND_NET:-frontend-net}"
      traefik.http.routers.n8n.entrypoints: "websecure"
      traefik.http.routers.n8n.middlewares: "securityheaders@docker"
      traefik.http.routers.n8n.rule: "Host(`${N8N_SERVER_HOSTNAME:?Variable is not set or empty}`)"
      traefik.http.routers.n8n.tls.certresolver: "${TRAEFIK_CERTRESOLVER:?Variable is not set or empty}"
      traefik.http.services.n8n.loadbalancer.server.port: ${N8N_UPSTREAM_PORT:-5678}
      traefik.http.routers.n8n.service: "n8n"
      # caddy
      caddy: ${SEATABLE_SERVER_HOSTNAME}:${N8N_PORT:-6231}
      caddy.reverse_proxy: "{{upstreams 5678}}"
    healthcheck:
#      test: ["CMD-SHELL", "pgrep -f n8n || exit 1"]
      test: ['CMD-SHELL','wget -q -Y off -O /dev/null http://127.0.0.1:5678 || exit 1']
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 5s
    depends_on:
      n8n-postgres:
        condition: service_healthy
    networks:
      - frontend-net
      - backend-n8n-net

networks:
  frontend-net:
    name: ${SEATABLE_FRONTEND_NET:-frontend-net}
    external: ${SEATABLE_FRONTEND_EXT:-false}
  backend-n8n-net:
    name: backend-n8n-net
